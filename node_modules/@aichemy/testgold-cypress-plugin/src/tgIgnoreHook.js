/**
 * Ignore file hook plugin for Cypress -- this runs in NodeJS (driver-side)
 *
 */

const fs = require('fs')
const path = require('path')

function tgIgnoreHook (config) {

  let ignoreContents = "";

  if (config['env'] && config['env']['TG_IGNORE']) {
    try {

      ignoreContents = fs.readFileSync(config['env']['TG_IGNORE'])
      console.log("ignoreContents", ignoreContents)

    } catch (err) {

      if (config['env']['TG_LOG_LEVEL'] !== undefined && config['env']['TG_LOG_LEVEL'] === 1) {
        console.log(
          `[TGI-DEBUG] Could not read .tgignore file ` +
          `defined in env variable TG_IGNORE: ${config['env']['TG_IGNORE']}. ` +
          `Trying default...`
        )
      }

    }

  }

  // if there's no env TG_IGNORE value or it could not be used, try to look up the
  // .tgignore file in the root of the test directory
  let tgIgnoreFile = path.resolve(config.projectRoot, '.tgignore')
  try {

    ignoreContents = fs.readFileSync(tgIgnoreFile).toString()
    if (config['env']['TG_LOG_LEVEL'] !== undefined && config['env']['TG_LOG_LEVEL'] === 1) {
      console.log("ignoreContents", ignoreContents)
    }

  } catch (err) {

    if (config['env']['TG_LOG_LEVEL'] !== undefined && config['env']['TG_LOG_LEVEL'] === 1) {
      console.log(
        `[TGI-DEBUG] Could not read .tgignore file ` +
        `in Cypress project root: ${tgIgnoreFile}. ` +
        `Skipping...`
      )
    }

  }

  if (ignoreContents.length > 0) {
    let ignoreList = ignoreContents.split('\n')
    let ignoreSet = new Set(ignoreList)
    if (ignoreSet.has("")) {
      ignoreSet.delete("")
    }

    // we need to return a JSON.stringify compatible item here, so convert the set back to an array
    // we'll also filter out lines starting with '#' as comments and trim any extra whitespace
    return Array.from(ignoreSet).filter((item) => {
      if (!item.startsWith('#')) {
        return item.trim()
      }
    })
  } else {
    return null
  }

}

module.exports = {
  tgIgnoreHook
}
