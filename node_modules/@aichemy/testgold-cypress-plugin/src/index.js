// contains the main entrypoint for the Cypress plugin
/* global Cypress, cy */

const {startTestRequest, finishTestRequest, getInterceptorConfig} = require('./utils')
const {interceptorHook} = require('./hook')

const interceptorConfig = getInterceptorConfig(Cypress, false)
let walServerRequestId = null

//
// event hooks
//

// attach to the "test:before:run" event emitted by Cypress to get a WAL
// server request ID
Cypress.on('test:before:run', async () => {
  // get the spec name to populate the test run name
  interceptorConfig['testRunName'] = Cypress.spec.name

  // get the test request ID
  if (interceptorConfig['tgEnabled'] === true && walServerRequestId === null) {
    walServerRequestId = await startTestRequest(Cypress, interceptorConfig)
    interceptorConfig["walServerRequestId"] = walServerRequestId
  }
})

// attach to the "test:after:run" event to close the test request
Cypress.on('test:after:run', async () => {
  if (interceptorConfig['tgEnabled'] === true && walServerRequestId !== null) {
    await finishTestRequest(walServerRequestId, interceptorConfig, Cypress)
  }
})

// attach to the "uncaught:exception" event to close the test request
Cypress.on('uncaught:exception', async () => {
  if (interceptorConfig['tgEnabled'] === true && walServerRequestId !== null) {
    await finishTestRequest(walServerRequestId, interceptorConfig, Cypress)
  }
})

// attach to the "fail" event to close the test request
Cypress.on('fail', async () => {
  if (interceptorConfig['tgEnabled'] === true && walServerRequestId !== null) {
    await finishTestRequest(walServerRequestId, interceptorConfig, Cypress)
  }
})

//
// main hook
//

// overwrite the normal Cypress get() command to provide interceptor bits
Cypress.Commands.overwrite('get', (originalCommand, selector, options = {}) => {
  // gets the full Cypress state object
  // https://github.com/cypress-io/cypress-documentation/pull/805
  const cypressState = cy.state
  let selectorToUse = null;
  let interceptorResult = null;

  // we don't handle aliases
  if (selector.startsWith("@")) {

    Cypress.log({
      name: '[TGI]',
      message: `â­• Ignoring alias: ${selector}`,
    })
    return originalCommand(selector, options)

  } else if (interceptorConfig["tgEnabled"]) {

    return (async () => {

      interceptorResult = await interceptorHook(
        selector,
        Cypress,
        cy,
        cypressState,
        walServerRequestId,
        interceptorConfig,
        []
      );

      if (interceptorResult['status'] === 'selector failed, heal OK') {
        selectorToUse = interceptorResult['healedSelector']
      } else {
        selectorToUse = selector;
      }

      // take a screenshot after the interceptor was run
      if (interceptorResult['interceptorConfig']['interceptorTakeScreenshots'] === true
        && interceptorResult['walServerRequestId'] !== undefined
        && interceptorResult['selectorId'] !== undefined
        && interceptorResult['specFileName'] !== undefined
        && interceptorResult['postRequestType'] !== undefined
        && interceptorResult['postSentAt'] !== undefined) {
        //
        // generate the screenshot filename and encode things we need into it
        //
        interceptorResult['screenshotFileName'] =
          `testgold_TG_${interceptorResult['walServerRequestId']}_` +
          `TG_${interceptorResult['selectorId']}_` +
          `TG_${interceptorResult['postRequestType']}_` +
          `TG_${interceptorResult['postSentAt']}_TG_${interceptorResult['specFileName']}` +
          `_TG_runner`

      }

      return originalCommand(selectorToUse, options)

    })();

  } else {
    return originalCommand(selector, options)
  }

})
