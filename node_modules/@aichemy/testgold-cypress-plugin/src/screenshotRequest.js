/**
 * Screenshot request class for Cypress -- this runs in NodeJS (driver-side)
 *
 */
const fetch = require('node-fetch')

/**
 * Contains a class encapsulating the interface to the WAL server's screenshot upload API:
 *
 * POST /interceptor/screenshot/v1/css
 *
 * JSON payload:

 * {
 *   walServerRequestId: the test request ID to associate this item with,
 *   selectorId: the selector ID of the current selector,
 *   specFileName: the name of the Cypress spec file,
 *   screenshotB64: base64 encoded screenshot,
 *   screenshotInfo: JSON object of screenshot info,
 *   associatedPostRequestType: one of 'initial', 'followup', 'suggest'
 *   associatedPostSentAt: the original CSS POST request's sentAt time
 * }
 */

class screenshotRequest {
  constructor (
    screenshotB64,
    screenshotInfo,
    walServerRequestId,
    selectorId,
    sentAt,
    specFileName,
    interceptorConfig,
  ) {
    this.walServerRequestId = walServerRequestId
    this.selectorId = selectorId
    this.screenshotB64 = screenshotB64
    this.screenshotInfo = screenshotInfo
    this.sentAt = parseInt(sentAt)
    this.specFileName = specFileName
    this.interceptorConfig = interceptorConfig
  }

  /**
   * This POSTs the screenshot to the WAL server to associate it with the current selectorId
   */
  async postScreenshot (associatedPostRequestType) {
    let postUrl = `${this.interceptorConfig.walServerHost}/screenshot/v1/css`
    let postData = JSON.stringify({
      walServerRequestId: this.walServerRequestId,
      selectorId: this.selectorId,
      screenshotB64: this.screenshotB64,
      screenshotInfo: this.screenshotInfo,
      specFileName: this.specFileName,
      associatedPostRequestType,
      associatedPostSentAt: this.sentAt,
    })

    const resp = await fetch(
      postUrl,
      {
        headers: {
          Authorization: `Bearer: ${this.interceptorConfig.walAuthToken}`,
          'Content-Type': 'application/json',
        },
        body: postData,
        method: 'POST',
      },
    )

    if (!resp.ok) {
      return {
        status: 'failed',
        message: resp.statusText,
        response: {
          code: resp.status,
        },
      }
    }

    return await resp.json()
  }
}

module.exports = {
  screenshotRequest,
}
