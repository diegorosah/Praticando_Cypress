/**
 * Screenshot hook plugin for Cypress -- this runs in NodeJS (driver-side)
 *
 */

const fs = require('fs')

const { screenshotRequest } = require('./screenshotRequest')

/**
 * Gets the CYPRESS_ prefixed interceptor env variables from the env.
 *
 * @param config
 * @returns {Object}
 */
function getInterceptorConfig (config) {
  if (config['env'] === undefined || config['env'] === null) {
    return {
      tgEnabled: false,
    }
  }

  const envTgEnabled = config['env']['TG_ENABLED']

  let tgEnabled = false

  if (envTgEnabled !== undefined && envTgEnabled !== null) {
    // this dance is to handle env vars and cypress conf values
    tgEnabled = envTgEnabled.toString().toLowerCase() === 'true'
  }

  if (tgEnabled) {
    let tgToken = config['env']['TG_TOKEN']

    if (tgToken === undefined || tgToken === null) {
      return {
        tgEnabled: false,
      }
    }

    let decodedToken = null

    try {
      decodedToken = JSON.parse(Buffer.from(tgToken, 'base64').toString())
    } catch (err) {
      return {
        tgEnabled: false,
      }
    }

    // WAL server specific bits
    const walAuthToken = decodedToken['walAuthToken']
    const walServerHost = decodedToken['walServerHost']
    const walServerUser = decodedToken['walServerUser']
    let walServerTimeout = 30.0

    return {
      tgEnabled,
      walAuthToken,
      walServerHost,
      walServerUser,
      walServerTimeout,
    }
  }
}

async function processScreenshot (screenshotDetails, cypressConfig) {
  const interceptorConfig = getInterceptorConfig(cypressConfig)

  if (interceptorConfig['tgEnabled'] !== true) {
    return
  }

  let screenshotName = screenshotDetails.name

  // ignore screenshots that don't have testgold in their name
  if (screenshotName === undefined) {
    return
  }

  if (!screenshotName.startsWith('testgold')) {
    return
  }

  // parse the screenshot file name to get the details required for the WAL server
  let [reqId, selId, reqType, sentAt, specName] = screenshotName.split('_TG_').slice(1)

  // read the screenshot file and encode it to base64
  let fileContents = fs.readFileSync(screenshotDetails.path, { encoding: 'base64' })

  let snapRequest = new screenshotRequest(
    fileContents,
    screenshotDetails,
    reqId,
    selId,
    sentAt,
    specName,
    interceptorConfig,
  )
  let respData = await snapRequest.postScreenshot(reqType)

  // eslint-disable-next-line no-console
  console.log(`[TGI-INFO] Screenshot posted for walServerRequestId: ${reqId}, selectorId: ${selId}, requestType; ${reqType}`)

  // return a Promise so Cypress knows to do the right thing
  return new Promise((resolve) => {
    resolve(respData)
  })
}

function addScreenshotHook (on, config) {
  on('after:screenshot', async (details) => await processScreenshot(details, config))
}

module.exports = {
  addScreenshotHook,
}
